---
import ReviewStars from './ReviewStars.astro';
import BookTags from './BookTags.astro';
import Button from './Button.astro';
import { levelConfig, formatConfig, popularityConfig } from '../utils/bookTags';
import { difficultyConfig } from '../utils/examTags';
import type { Product } from '../types/product';
import type { FormatTag, PopularityTag } from '../types/book';
import '../styles/Card.css';

interface Props {
	product: Product;
	size?: 'small' | 'medium' | 'large';
	className?: string;
	editorial?: string; // Optional editorial name (not ID)
}

const {
	product,
	size = 'medium',
	className = '',
	editorial, // Optional override for editorial name
} = Astro.props;

// Extract values from the product object
const {
	id,
	title,
	price,
	discount = 0,
	coverImage,
	rating,
	level,
	formatTags = [],
	popularityTags = [],
	productType = 'book',
	detailsLink,
} = product;

// Calculate discount if provided
const hasDiscount = discount > 0;
const discountedPrice = hasDiscount ? price * (1 - discount / 100) : price;
const finalPrice = discountedPrice;

// Format prices
const formattedPrice = `S/${price.toFixed(2)}`;
const formattedFinalPrice = `S/${finalPrice.toFixed(2)}`;

// Determine level or difficulty display
const tagConfig = productType === 'exam' ? difficultyConfig : levelConfig;
const levelOrDifficulty = level;
const levelDisplay = levelOrDifficulty
	? tagConfig[levelOrDifficulty as keyof typeof tagConfig]
	: null;

// Replace fixed height configurations with responsive approach
const cardClasses = {
	small: 'product-card-small',
	medium: 'product-card-medium',
	large: 'product-card-large',
};

const imgHeights = {
	small: 'h-[100px] sm:h-[120px]',
	medium: 'h-[120px] sm:h-[160px]',
	large: 'h-[140px] sm:h-[180px]',
};

// Better font sizing for responsive display
const fontSizes = {
	small: 'text-xs sm:text-sm',
	medium: 'text-sm sm:text-base',
	large: 'text-base sm:text-lg',
};

const formatTagsLimit = {
	small: { xs: 1, sm: 1 },
	medium: { xs: 1, sm: 2 },
	large: { xs: 2, sm: 3 },
};

const popularityTagsLimit = {
	small: { xs: 0, sm: 1 },
	medium: { xs: 1, sm: 1 },
	large: { xs: 1, sm: 2 },
};

// Properly type and filter the tags
const typedFormatTags = formatTags as FormatTag[];
const typedPopularityTags = popularityTags as PopularityTag[];

// Get high priority tags first (PDF is usually most important for books)
const prioritizedFormatTags = [...typedFormatTags].sort((a, b) => {
	// Prioritize PDF, then AUDIO, then other formats
	if (a === 'pdf') return -1;
	if (b === 'pdf') return 1;
	if (a === 'audio') return -1;
	if (b === 'audio') return 1;
	return 0;
});

// Prepare tags to display based on screen size and card size
const visibleFormatTags = prioritizedFormatTags.slice(
	0,
	formatTagsLimit[size].sm
);
const visiblePopularityTags = typedPopularityTags.slice(
	0,
	popularityTagsLimit[size].sm
);

const isBestseller = typedPopularityTags.includes(
	'bestSeller' as PopularityTag
);
const showBestsellerTag =
	isBestseller &&
	!visiblePopularityTags.includes('bestSeller' as PopularityTag);

// Determine if we should show editorial based on size
const showEditorial = size !== 'small' && editorial;
---

<div
	class={`product-card relative flex flex-col overflow-hidden rounded-lg bg-white shadow-md hover:shadow-lg transition-all duration-300 ${cardClasses[size]} ${className}`}>
	<!-- Product Image Container -->
	<a
		href={detailsLink}
		class='block relative overflow-hidden book-cover-container'>
		<img
			src={coverImage}
			alt={`Portada de ${title}`}
			class={`w-full object-cover transition-transform duration-500 group-hover:scale-105 ${imgHeights[size]}`}
			loading='lazy'
		/>

		{/* Discount Badge - Optimized for mobile */}
		{
			hasDiscount && (
				<div class='absolute top-1 right-1 sm:top-2 sm:right-2 bg-accent text-white font-bold text-[10px] sm:text-xs py-0.5 px-1.5 sm:py-1 sm:px-3 rounded-full shadow-md'>
					{discount}% OFF
				</div>
			)
		}

		{/* Bestseller Badge - Optimized for mobile */}
		{
			isBestseller && (
				<div class='absolute top-1 left-1 sm:top-2 sm:left-2 bg-amber-400 text-primary-dark font-bold text-[10px] sm:text-xs py-0.5 px-1.5 sm:py-1 sm:px-3 rounded-full shadow-md bestseller-badge'>
					<span class='flex items-center'>ðŸ”¥</span>
				</div>
			)
		}

		{/* Product Type Badge - Optimized for mobile */}
		<div
			class='absolute bottom-1 left-1 sm:bottom-2 sm:left-2 bg-primary bg-opacity-80 text-white text-[10px] sm:text-xs py-0.5 px-1.5 sm:py-1 sm:px-2 rounded'>
			{
				productType === 'book'
					? 'Libro'
					: productType === 'exam'
						? 'Examen'
						: 'Pack'
			}
		</div>
	</a>

	<!-- Product Details -->
	<div class='flex flex-col flex-grow p-2 sm:p-4'>
		{/* Editorial - Only on larger screens */}
		{
			showEditorial && (
				<div class='hidden sm:block text-xs text-gray-500 mb-1'>
					{editorial}
				</div>
			)
		}

		{/* Title - Improved font scaling */}
		<h3
			class={`font-bold text-gray-800 mb-1 line-clamp-2 ${fontSizes[size]}`}>
			<a href={detailsLink} class='hover:text-primary transition-colors'>
				{title}
			</a>
		</h3>

		{/* Level/Difficulty Tag */}
		{
			levelDisplay && (
				<div class='mb-1 sm:mb-2'>
					<span
						class={`inline-block text-[10px] sm:text-xs px-1 sm:px-2 py-0.5 rounded-full ${levelDisplay.color}`}>
						{levelDisplay.label}
					</span>
				</div>
			)
		}

		{/* Tags */}
		<div class={`tags-container ${size !== 'small' ? 'flex-grow' : ''}`}>
			<BookTags
				formatTags={visibleFormatTags}
				popularityTags={visiblePopularityTags}
				formatConfig={formatConfig}
				popularityConfig={popularityConfig}
			/>
		</div>

		{/* Rating Stars */}
		{
			rating &&
				rating.score > 0 &&
				(size !== 'small' ||
					(size === 'small' && className.includes('sm:'))) && (
					<div class='flex items-center mb-1 sm:mb-2'>
						<ReviewStars
							score={rating.score}
							size='small'
							showScore={false}
							className='text-yellow-400'
						/>
					</div>
				)
		}

		{/* Price Display */}
		<div class='flex items-center justify-between mt-auto pt-2'>
			<div class='price-display'>
				{
					hasDiscount ? (
						<div class='flex flex-col'>
							<span class='font-bold text-primary text-sm sm:text-base'>
								{formattedFinalPrice}
							</span>
							<span class='text-gray-500 line-through text-[10px] sm:text-xs'>
								{formattedPrice}
							</span>
						</div>
					) : (
						<span class='font-bold text-primary text-sm sm:text-base'>
							{formattedPrice}
						</span>
					)
				}
			</div>
			<Button
				href={detailsLink}
				variant='primary'
				size={size === 'small' ? 'xsmall' : 'small'}
				newTab={false}>
				{size === 'small' ? 'Ver' : 'Ver detalles'}
			</Button>
		</div>
	</div>
</div>

<style>
	.product-card {
		border: 1px solid rgba(0, 0, 0, 0.05);
		transition: all 0.3s ease;
	}

	/* Responsive height for different card sizes */
	.product-card-small {
		min-height: 220px;
	}

	.product-card-medium {
		min-height: 260px;
	}

	.product-card-large {
		min-height: 300px;
	}

	/* Adjust heights for larger screens */
	@media (min-width: 640px) {
		.product-card-small {
			min-height: 320px;
		}

		.product-card-medium {
			min-height: 360px;
		}

		.product-card-large {
			min-height: 420px;
		}
	}

	/* More space-efficient tag display on mobile */
	.tags-container {
		margin-bottom: 0.5rem;
	}

	@media (min-width: 640px) {
		.tags-container {
			margin-bottom: 0.75rem;
		}
	}

	.product-card:hover {
		transform: translateY(-5px);
	}

	/* Bestseller badge animation */
	.bestseller-badge {
		animation: pulse 2s infinite;
	}

	@keyframes pulse {
		0% {
			transform: scale(1);
		}
		50% {
			transform: scale(1.05);
		}
		100% {
			transform: scale(1);
		}
	}

	/* Better touch target sizes on small screens */
	@media (max-width: 480px) {
		.product-card a.bg-primary {
			padding: 0.25rem 0.5rem;
			min-width: 32px;
			text-align: center;
		}
	}

	/* Fix line height on small screens */
	@media (max-width: 640px) {
		.product-card h3 {
			line-height: 1.3;
		}
	}

	/* In mobile 2-column grid layout, add spacing between cards */
	@media (max-width: 640px) {
		.product-card {
			margin-bottom: 0.5rem;
		}
	}
</style>
