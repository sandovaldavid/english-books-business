---
import '../styles/QuestionCard.css';

// Define props interface
interface Props {
	question: string;
	answer: string;
	expanded?: boolean;
	id?: string;
	className?: string;
}

// Extract props with defaults
const {
	question,
	answer,
	expanded = false,
	id = `question-${Math.random().toString(36).substring(2, 9)}`,
	className = '',
} = Astro.props;
---

<div
	class={`bg-white rounded-xl shadow-sm border border-neutral hover:border-primary/30 transition-all duration-300 overflow-hidden question-card group ${expanded ? 'expanded' : ''} ${className}`}>
	<button
		id={`${id}-header`}
		aria-expanded={expanded ? 'true' : 'false'}
		aria-controls={`${id}-panel`}
		class='w-full text-left p-5 sm:p-6 flex items-start justify-between focus:outline-none focus:ring-2 focus:ring-primary/50 focus:ring-offset-2 rounded-lg'>
		<h3
			class='text-base sm:text-lg font-bold text-primary-dark pr-8 group-hover:text-primary transition-colors'>
			{question}
		</h3>
		<div
			class='question-icon flex-shrink-0 ml-2 bg-neutral-light rounded-full w-6 h-6 flex items-center justify-center transition-all duration-300'>
			<svg
				xmlns='http://www.w3.org/2000/svg'
				class='h-4 w-4 text-primary transform transition-transform duration-300'
				viewBox='0 0 20 20'
				fill='currentColor'>
				<path
					fill-rule='evenodd'
					d='M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z'
					clip-rule='evenodd'></path>
			</svg>
		</div>
	</button>

	<div
		id={`${id}-panel`}
		role='region'
		aria-labelledby={`${id}-header`}
		class='answer-panel overflow-hidden transition-all duration-300 max-h-0'
		aria-hidden={expanded ? 'false' : 'true'}>
		<div class='p-5 sm:p-6 pt-0 sm:pt-0 border-t border-neutral'>
			<p class='text-gray-600 text-sm sm:text-base'>
				{answer}
			</p>
		</div>
	</div>
</div>

<script define:vars={{ id, expanded }}>
	// Execute this script when component is included
	document.addEventListener('DOMContentLoaded', () => {
		const questionCard = document
			.getElementById(`${id}-header`)
			?.closest('.question-card');
		const answerPanel = document.getElementById(`${id}-panel`);
		const button = document.getElementById(`${id}-header`);

		if (questionCard && button && answerPanel) {
			// Initialize the expanded state
			if (expanded) {
				questionCard.classList.add('expanded');
				button.setAttribute('aria-expanded', 'true');
				answerPanel.setAttribute('aria-hidden', 'false');
			}

			// Add click handler
			button.addEventListener('click', () => {
				const isExpanded = questionCard.classList.contains('expanded');

				// Toggle the expanded state
				if (isExpanded) {
					questionCard.classList.remove('expanded');
					button.setAttribute('aria-expanded', 'false');
					answerPanel.setAttribute('aria-hidden', 'true');
				} else {
					questionCard.classList.add('expanded');
					button.setAttribute('aria-expanded', 'true');
					answerPanel.setAttribute('aria-hidden', 'false');
				}
			});
		}
	});
</script>
