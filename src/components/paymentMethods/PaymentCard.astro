---
import Copy from '../icons/Copy.astro';
import '../../styles/paymentMethods/paymentCard.css';

interface Props {
	title: string;
	description: string;
	paymentNumber: string;
	icon?: any;
	color?: string;
	instructions?: string;
	logoWidth?: string;
	logoHeight?: string;
	image?: string;
}

const {
	title,
	description,
	paymentNumber,
	icon: Icon,
	color = 'bg-purple-100', // Default color
	instructions = 'Captura la pantalla de confirmaciÃ³n para enviarla como comprobante.',
	logoWidth = 'w-10',
	logoHeight = 'h-10',
	image,
} = Astro.props;

// Generate a unique ID for this payment method (for copy functionality)
const paymentId = `payment-${Math.random().toString(36).substring(2, 9)}`;
---

<div
	class='payment-method-card bg-white rounded-xl border border-gray-200 p-6 transition-all duration-300 hover:shadow-lg group relative overflow-hidden'>
	<!-- Subtle background effect on hover -->
	<div
		class='absolute inset-0 bg-gradient-to-b from-transparent to-gray-50 opacity-0 group-hover:opacity-100 transition-opacity duration-500'>
	</div>

	<div class='relative z-10'>
		<div class='flex justify-center mb-4'>
			<div
				class={`w-16 h-16 flex items-center justify-center rounded-full ${color} transition-transform duration-300 group-hover:scale-110 shadow-sm group-hover:shadow-md`}>
				{
					image ? (
						<img
							src={image}
							class={`${logoWidth} ${logoHeight} object-contain transition-all duration-300`}
							alt={title}
						/>
					) : Icon ? (
						<Icon
							class={`${logoWidth} ${logoHeight} transition-all duration-300`}
						/>
					) : (
						<span class='text-3xl'>ðŸ“±</span>
					)
				}
			</div>
		</div>
		<h3 class='text-xl font-bold text-primary-dark text-center mb-2'>
			{title}
		</h3>
		<p class='text-gray-600 text-center mb-4'>{description}</p>

		<!-- Payment Number with Copy Button -->
		<div
			class='bg-gray-100 rounded-lg p-3 mb-4 relative group-payment overflow-hidden hover:bg-gray-50 transition-colors duration-300 border border-transparent hover:border-gray-200'>
			<p
				id={paymentId}
				class='text-center font-mono text-gray-800 select-all'>
				{paymentNumber}
			</p>

			<!-- Subtle shimmer effect on hover -->
			<div
				class='absolute inset-0 bg-gradient-to-r from-transparent via-gray-200/20 to-transparent shimmer-effect opacity-0 group-hover:opacity-100'>
			</div>

			<button
				class='copy-button absolute right-3 top-1/2 transform -translate-y-1/2 bg-primary text-white p-1.5 rounded-full opacity-0 group-hover:opacity-100 group-payment-hover:opacity-100 transition-all duration-300 hover:bg-primary-dark'
				data-clipboard-target={`#${paymentId}`}
				aria-label='Copiar nÃºmero'>
				<Copy class='w-4 h-4' />
			</button>

			<!-- Success message that appears when copied -->
			<div
				class='copied-message absolute right-3 top-1/2 transform -translate-y-1/2 bg-accent text-white py-1 px-3 rounded-full text-xs opacity-0 pointer-events-none transition-opacity duration-300'
				data-for={paymentId}>
				Â¡Copiado!
			</div>
		</div>

		<p class='text-sm text-gray-500 text-center'>
			{instructions}
		</p>
	</div>
</div>

<script>
	// Add clipboard functionality with better feedback
	document.addEventListener('DOMContentLoaded', () => {
		const copyButtons = document.querySelectorAll('.copy-button');

		copyButtons.forEach((button) => {
			button.addEventListener('click', () => {
				const targetId = button
					.getAttribute('data-clipboard-target')
					?.substring(1);
				if (targetId) {
					const textElement = document.getElementById(targetId);
					if (textElement) {
						// Create selection and copy text
						const text = textElement.innerText;
						navigator.clipboard
							.writeText(text)
							.then(() => {
								// Hide the button temporarily
								(button as HTMLElement).style.opacity = '0';

								// Find the success message element
								const successMessage =
									button.parentElement?.querySelector(
										`.copied-message[data-for="${targetId}"]`
									) as HTMLElement;

								const copyButton =
									button.parentElement?.querySelector(
										'.copy-button'
									) as HTMLElement;

								if (successMessage) {
									// Show the copied message
									successMessage.style.opacity = '1';

									// Hide the message and show the button after delay
									setTimeout(() => {
										successMessage.style.opacity = '0';
										(button as HTMLElement).style.opacity =
											'1';
										copyButton.style.opacity = '0';
									}, 1500);
								}
							})
							.catch((err) => {
								console.error('Failed to copy text: ', err);
							});
					}
				}
			});
		});
	});
</script>
