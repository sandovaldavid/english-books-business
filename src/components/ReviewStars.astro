---
import StarIcon from './icons/Star.astro';
interface Props {
	score: number;
	size?: 'small' | 'medium' | 'large';
	showScore?: boolean;
	reviewCount?: number;
	className?: string;
}

const {
	score,
	size = 'medium',
	showScore = true,
	reviewCount = undefined,
	className,
} = Astro.props;

// Calculate full and partial stars
const fullStarsCount = Math.floor(score);
const partialFill = score - fullStarsCount;
const emptyStarsCount = 5 - fullStarsCount - (partialFill > 0 ? 1 : 0);

// Size classes
const sizeClasses = {
	small: 'w-4 h-4 text-sm',
	medium: 'w-5 h-5 text-base',
	large: 'w-6 h-6 text-lg',
};

const starSizeClass = sizeClasses[size];
---

<div class=`flex items-center ${className}`>
	<div class='flex items-center justify-between'>
		{/* Full stars */}
		{
			Array.from({ length: fullStarsCount }).map(() => (
				<StarIcon class='w-5 h-5 text-yellow-400 mr-0.5' />
			))
		}

		{/* Partial star */}
		{
			partialFill > 0 && (
				<div class='relative mr-0.5'>
					{/* Background star (empty) */}
					<StarIcon class={`${starSizeClass} text-gray-300`} />

					{/* Foreground star (partial fill) */}
					<div
						class='absolute inset-0 overflow-hidden'
						style={`width: ${partialFill * 100}%`}>
						<StarIcon class={`${starSizeClass} text-yellow-400`} />
					</div>
				</div>
			)
		}

		{/* Empty stars */}
		{
			Array.from({ length: emptyStarsCount }).map(() => (
				<svg
					class={`${starSizeClass} text-gray-300 mr-0.5`}
					fill='currentColor'
					viewBox='0 0 24 24'
					stroke='none'
					aria-hidden='true'>
					<path d='M12 2l2.4 7.2h7.6l-6 4.8 2.4 7.2-6-4.8-6 4.8 2.4-7.2-6-4.8h7.6z' />
				</svg>
			))
		}
	</div>

	{
		showScore && (
			<span class='text-sm text-gray-500 ml-1.5'>
				{score.toFixed(1)}
				{reviewCount !== undefined && (
					<span class='ml-1'>({reviewCount})</span>
				)}
			</span>
		)
	}
</div>

<style>
	div:hover svg {
		transform: scale(1.1);
	}
</style>
