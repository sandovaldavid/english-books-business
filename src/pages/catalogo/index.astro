---
import Layout from '../../layouts/Layout.astro';
import SectionTitle from '../../components/SectionTitle.astro';
import CatalogContainer from '../../components/catalog/CatalogContainer.astro';
import CatalogHero from '../../components/catalog/CatalogHero.astro';
import CategoryCards from '../../components/catalog/CategoryCards.astro';
import PromoSection from '../../components/catalog/PromoSection.astro';
import FAQ from '../../components/FAQ.astro';
import CTABanner from '../../components/CTA-Banner.astro';
import '../../styles/catalog.css';

// Import book data and types
import booksData from '../../database/books.json';
import type { Book } from '../../types/book';
import { BookLevel, FormatTag, PopularityTag } from '../../types/book';

// Get filter parameters from URL if any
const { searchParams } = Astro.url;
const level = searchParams.get('level') || 'all';
const format = searchParams.get('format') || 'all';
const sort = searchParams.get('sort') || 'featured';

// Determine page title based on filters
let pageTitle = 'Catálogo de Libros en Inglés';
let pageDescription =
	'Explora nuestro catálogo completo de libros y materiales educativos en inglés para profesionales y estudiantes de todos los niveles.';

// Define level name mapping with proper type checking
const levelNames: Record<string, string> = {
	basic: 'Nivel Básico',
	intermediate: 'Nivel Intermedio',
	advanced: 'Nivel Avanzado',
	professional: 'Nivel Profesional',
	'all-levels': 'Multi-nivel',
};

// If level filter is applied, customize title
if (level !== 'all') {
	const levelName = levelNames[level] || level;
	pageTitle = `Libros en Inglés - ${levelName}`;
	pageDescription = `Materiales educativos en inglés para ${levelName}. Encuentra los recursos perfectos para tu nivel de aprendizaje.`;
}

// Define format name mapping with proper type checking
const formatNames: Record<string, string> = {
	pdf: 'PDF',
	workbook: 'Workbooks',
	audio: 'Material con Audio',
	video: 'Material con Video',
	software: 'Software',
	exams: 'Exámenes de Práctica',
};

// If format filter is applied, customize further
if (format !== 'all') {
	const formatName = formatNames[format] || format;
	pageTitle = `${formatName} - ${pageTitle}`;
	pageDescription = `${formatName} ${pageDescription}`;
}

// Validate book data and transform to proper Book type
const safeBooks: Book[] = booksData.map((book) => ({
	id: book.id || '',
	title: book.title || '',
	description: book.description || '',
	price: book.price || 0,
	coverImage: book.coverImage || '',
	altText: book.altText || `${book.title} Book cover`,
	includedItems: book.includedItems || [],
	rating: book.rating || { score: 0, reviewCount: 0 },
	buyLink: book.buyLink || '#',
	detailsLink: book.detailsLink || '#',
	discount: book.discount || 0,
	level: book.level as BookLevel,
	featured: book.featured || false,
	formatTags: (book.formatTags || []) as FormatTag[],
	popularityTags: (book.popularityTags || []) as PopularityTag[],
}));
---

<Layout title={`${pageTitle} | FluentReads`} description={pageDescription}>
	<!-- Hero Section -->
	<CatalogHero />

	<!-- Categories Section -->
	<section class='py-12 container mx-auto px-4'>
		<div class='text-center mb-10 fade-in'>
			<SectionTitle>Categorías principales</SectionTitle>
			<p class='text-gray-600 max-w-3xl mx-auto'>
				Explora nuestros materiales por categoría y encuentra
				exactamente lo que necesitas.
			</p>
		</div>
		<CategoryCards />
	</section>

	<!-- Main Catalog Section -->
	<section class='py-12 relative catalog-section' id='full-catalog'>
		<!-- Background decorative elements -->
		<div class='absolute inset-0'></div>
		<div class='accent-shape'></div>

		<div class='container mx-auto px-4 relative z-10'>
			<div class='flex flex-col items-center fade-in'>
				<SectionTitle tag='h2' class='mb-4 text-center'>
					Explora nuestro catálogo completo
				</SectionTitle>
				<p class='text-gray-600 max-w-3xl mx-auto text-center mb-8'>
					Encuentra los mejores materiales para dominar el inglés,
					desde nivel principiante hasta profesional.
				</p>
			</div>

			<!-- Integrated Catalog Container with Filter -->
			<CatalogContainer
				books={safeBooks}
				initialLevel={level}
				initialFormat={format}
				initialSort={sort}
			/>
		</div>
	</section>

	<!-- Promotional Section -->
	<PromoSection />

	<!-- FAQ Section -->
	<FAQ
		className='py-16'
		dataset='catalog'
		title='Preguntas frecuentes sobre nuestros materiales'
		description='Resolvemos tus dudas sobre nuestros libros y materiales digitales de inglés.'
	/>

	<!-- CTA Banner -->
	<div class='container mx-auto px-4 mb-16'>
		<CTABanner />
	</div>
</Layout>

<script>
	// Initialize scroll and animation behaviors
	document.addEventListener('DOMContentLoaded', () => {
		// Get the hash from URL to check if we need to scroll to catalog section
		const hash = window.location.hash;
		if (hash === '#full-catalog') {
			// Delay scrolling slightly to ensure the page is loaded
			setTimeout(() => {
				const catalogSection = document.getElementById('full-catalog');
				if (catalogSection) {
					catalogSection.scrollIntoView({ behavior: 'smooth' });
				}
			}, 500);
		}

		// Set up intersection observer for animations
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						entry.target.classList.add('in-view');
						observer.unobserve(entry.target);
					}
				});
			},
			{
				threshold: 0.1,
				rootMargin: '0px 0px -50px 0px',
			}
		);

		// Observe elements that should animate on scroll
		document
			.querySelectorAll(
				'.fade-in, .slide-up, .category-card, .promo-item'
			)
			.forEach((el) => observer.observe(el));
	});
</script>
