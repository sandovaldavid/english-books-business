---
import Layout from '../../../layouts/Layout.astro';
import ExamDetails from '../../../components/details/ExamDetails.astro';
import Breadcrumb from '../../../components/Breadcrumb.astro';
import examsData from '../../../database/exams.json';
import siteInfo from '../../../database/pageInformation.json';
import type { Exam } from '../../../types/exam';
import { difficultyConfig } from '../../../utils/examTags';

export async function getStaticPaths() {
	const examsArray = Array.isArray(examsData) ? examsData : [examsData];

	return examsArray.map((exam) => ({
		params: { id: exam.id },
		props: { exam },
	}));
}

interface Props {
	exam: Exam;
}

const { exam } = Astro.props;

// Find related exams if any (same exam type or difficulty)
const examsArray = Array.isArray(examsData) ? examsData : [examsData];
const relatedExams = examsArray
	.filter(
		(item) =>
			item.id !== exam.id &&
			(item.examType === exam.examType ||
				item.difficulty === exam.difficulty)
	)
	.slice(0, 4);

// Calculate discounted price if there's a discount
const hasDiscount = exam.discount !== undefined && exam.discount > 0;
const originalPrice = exam.price;
const discountedPrice = hasDiscount
	? exam.price * (1 - (exam.discount || 0) / 100)
	: exam.price;

// SEO metadata
const examDifficulty = exam.difficulty
	? difficultyConfig[exam.difficulty as keyof typeof difficultyConfig]?.label || exam.difficulty
	: '';
const examType = exam.examType || '';

// Improved title with keywords
const title = `${exam.title} | Preparación para ${examType} | FluentReads`;

// Enhanced description
const description = exam.description?.length > 160
	? `${exam.description.substring(0, 157)}...`
	: exam.description ||
	  `Material de preparación para el examen ${exam.title}. Ideal para certificar tu nivel de inglés.`;

// Canonical URL
const siteUrl = new URL(siteInfo.siteURL);
const canonicalURL = new URL(`/catalogo/examenes-internacionales/${exam.id}`, siteUrl);

// Structured data for rich snippets
const structuredData = {
	'@context': 'https://schema.org',
	'@type': 'Product',
	name: exam.title,
	description: exam.description,
	image: exam.coverImage,
	sku: exam.id,
	offers: {
		'@type': 'Offer',
		price: discountedPrice,
		priceCurrency: 'PEN',
		availability: 'https://schema.org/InStock',
		url: canonicalURL.toString(),
		priceValidUntil: new Date(
			new Date().setFullYear(new Date().getFullYear() + 1)
		)
			.toISOString()
			.split('T')[0],
	},
	brand: {
		'@type': 'Brand',
		name: siteInfo.siteName,
	},
	aggregateRating: exam.rating
		? {
				'@type': 'AggregateRating',
				ratingValue: exam.rating.score,
				reviewCount: exam.rating.reviewCount,
				bestRating: '5',
				worstRating: '1',
			}
		: undefined,
};

// Breadcrumb structured data
const breadcrumbJsonLd = {
	'@context': 'https://schema.org',
	'@type': 'BreadcrumbList',
	itemListElement: [
		{
			'@type': 'ListItem',
			position: 1,
			name: 'Inicio',
			item: new URL('/', siteUrl).toString(),
		},
		{
			'@type': 'ListItem',
			position: 2,
			name: 'Catálogo',
			item: new URL('/catalogo', siteUrl).toString(),
		},
		{
			'@type': 'ListItem',
			position: 3,
			name: 'Exámenes Internacionales',
			item: new URL('/catalogo/examenes-internacionales', siteUrl).toString(),
		},
		{
			'@type': 'ListItem',
			position: 4,
			name: exam.title,
			item: canonicalURL.toString(),
		},
	],
};

// Breadcrumb navigation items
const breadcrumbItems = [
	{ label: 'Inicio', url: '/' },
	{ label: 'Catálogo', url: '/catalogo' },
	{ label: 'Exámenes Internacionales', url: '/catalogo/examenes-internacionales' },
	{ label: exam.title, url: `/catalogo/examenes-internacionales/${exam.id}`, active: true },
];
---

<Layout
	title={title}
	description={description}
	productType="exam"
	price={discountedPrice}
	currency="PEN"
	image={exam.coverImage}
	canonicalURL={canonicalURL}
	ogTitle={title}
	ogDescription={description}
	ogImage={exam.coverImage}
	twitterTitle={title}
	twitterDescription={description}
	twitterImage={exam.coverImage}
	structuredData={structuredData}
	breadcrumbData={breadcrumbJsonLd}>
	
	<!-- Breadcrumb component for navigation -->
	<div class="container mx-auto px-4 py-4">
		<Breadcrumb items={breadcrumbItems} />
	</div>

	<!-- Exam details section -->
	<ExamDetails exam={exam} relatedExams={relatedExams} />

	<!-- Add event listener for cart operations -->
	<script>
		import { CartManager } from '../../../utils/cartManager';

		// Initialize cart functionality
		document.addEventListener('DOMContentLoaded', () => {
			// Make sure cart is initialized
			if (typeof window !== 'undefined') {
				CartManager.initializeCart();
			}

			// Listen for cart updates to refresh indicators
			window.addEventListener('cartUpdated', () => {
				console.log('Cart updated');
			});
		});
	</script>
</Layout>
