---
import Layout from '../layouts/Layout.astro';
import Button from '../components/Button.astro';
import WhatsAppIcon from '../components/icons/WhatsApp.astro';
import CartIcon from '../components/icons/Cart.astro';
import SectionTitle from '../components/SectionTitle.astro';

// WhatsApp business number
const whatsappNumber = '+51987654321'; // Replace with your actual WhatsApp number
---

<Layout
	title='Carrito de Compras | FluentReads'
	description='Revisa y confirma tu pedido de libros digitales en inglÃ©s con FluentReads.'>
	<div class='max-w-4xl mx-auto px-4 py-12'>
		<SectionTitle>Tu Carrito de Compras</SectionTitle>

		<div id='empty-cart-message' class='hidden text-center py-12'>
			<div class='text-6xl mb-4'>ðŸ›’</div>
			<h2 class='text-2xl font-bold text-gray-700 mb-3'>
				Tu carrito estÃ¡ vacÃ­o
			</h2>
			<p class='text-gray-500 mb-6'>
				Explora nuestro catÃ¡logo y aÃ±ade productos a tu carrito
			</p>
			<Button
				variant='primary'
				size='medium'
				href='/catalogo'
				class='inline-flex items-center'>
				Ver CatÃ¡logo
			</Button>
		</div>

		<div id='cart-container' class='hidden'>
			<!-- Cart items will be displayed here -->
			<div id='cart-items' class='mt-8 space-y-4 mb-8'></div>

			<!-- Order summary -->
			<div class='border-t border-gray-200 pt-6 mt-8'>
				<div
					class='flex justify-between font-bold text-lg text-primary-dark mb-4'>
					<span>Total:</span>
					<span id='cart-total'>S/0.00</span>
				</div>

				<div
					class='bg-blue-50 p-4 rounded-lg mb-8 border border-blue-100'>
					<h3 class='font-bold text-blue-800 mb-2'>
						Â¿CÃ³mo completar tu compra?
					</h3>
					<ol
						class='list-decimal list-inside text-sm text-blue-700 space-y-2'>
						<li>Haz clic en "Enviar pedido por WhatsApp"</li>
						<li>Confirma tu pedido en el chat de WhatsApp</li>
						<li>Te enviaremos los datos de pago</li>
						<li>EnvÃ­anos el comprobante de pago</li>
						<li>RecibirÃ¡s los materiales inmediatamente</li>
					</ol>
				</div>

				<Button
					id='whatsapp-checkout-btn'
					variant='accent'
					size='large'
					class='w-full justify-center shadow-lg hover:shadow-xl transform transition-all duration-300 hover:-translate-y-1 mb-4'>
					<WhatsAppIcon class='w-5 h-5 mr-2' />
					Enviar pedido por WhatsApp
				</Button>

				<Button
					id='clear-cart-btn'
					variant='outline'
					size='medium'
					class='w-full justify-center'>
					Vaciar carrito
				</Button>
			</div>
		</div>
	</div>
</Layout>

<script define:vars={{ whatsappNumber }}>
	document.addEventListener('DOMContentLoaded', () => {
		// Get DOM elements
		const cartContainer = document.getElementById('cart-container');
		const emptyCartMessage = document.getElementById('empty-cart-message');
		const cartItemsContainer = document.getElementById('cart-items');
		const cartTotalElement = document.getElementById('cart-total');
		const whatsappCheckoutBtn = document.getElementById(
			'whatsapp-checkout-btn'
		);
		const clearCartBtn = document.getElementById('clear-cart-btn');

		// Load cart data from localStorage
		function loadCart() {
			const cart = JSON.parse(localStorage.getItem('shoppingCart')) || [];

			// Show/hide appropriate elements based on cart state
			if (cart.length === 0) {
				cartContainer.classList.add('hidden');
				emptyCartMessage.classList.remove('hidden');
			} else {
				cartContainer.classList.remove('hidden');
				emptyCartMessage.classList.add('hidden');

				// Clear previous items
				cartItemsContainer.innerHTML = '';

				// Calculate total price
				let total = 0;

				// Render cart items
				cart.forEach((item, index) => {
					const itemTotal = item.price * item.quantity;
					total += itemTotal;

					// Create cart item element
					const cartItemEl = document.createElement('div');
					cartItemEl.className =
						'flex flex-col sm:flex-row items-center bg-white p-4 rounded-lg shadow-sm border border-gray-200';
					cartItemEl.innerHTML = `
                        <div class="flex-shrink-0 w-20 h-20 mb-3 sm:mb-0 sm:mr-4">
                            <img src="${item.image}" alt="${item.title}" class="w-full h-full object-cover rounded">
                        </div>
                        <div class="flex-grow text-center sm:text-left">
                            <h4 class="font-bold text-gray-800">${item.title}</h4>
                            <div class="text-sm text-gray-500 mb-1">
                                ${item.type === 'book' ? 'Libro' : item.type === 'exam' ? 'Examen' : 'Pack'}
                            </div>
                            <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mt-2">
                                <div class="text-primary font-bold">
                                    S/${item.price.toFixed(2)}
                                </div>
                                <div class="flex items-center justify-center sm:justify-end mt-2 sm:mt-0">
                                    <button 
                                        class="quantity-btn decrease bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-1 px-2 rounded-l" 
                                        data-index="${index}"
                                    >-</button>
                                    <span class="quantity-display bg-gray-100 py-1 px-3">${item.quantity}</span>
                                    <button 
                                        class="quantity-btn increase bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-1 px-2 rounded-r" 
                                        data-index="${index}"
                                    >+</button>
                                    <button 
                                        class="remove-item ml-4 text-red-500 hover:text-red-700" 
                                        data-index="${index}"
                                    >
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;

					// Add cart item to container
					cartItemsContainer.appendChild(cartItemEl);
				});

				// Update total price display
				cartTotalElement.textContent = `S/${total.toFixed(2)}`;
			}
		}

		// Handle quantity changes and item removal
		cartItemsContainer.addEventListener('click', (e) => {
			const target = e.target;

			if (
				target.classList.contains('quantity-btn') ||
				target.closest('.quantity-btn')
			) {
				const btn = target.classList.contains('quantity-btn')
					? target
					: target.closest('.quantity-btn');
				const index = parseInt(btn.getAttribute('data-index'));
				const isIncrease = btn.classList.contains('increase');

				// Get current cart
				const cart =
					JSON.parse(localStorage.getItem('shoppingCart')) || [];

				if (isIncrease) {
					cart[index].quantity += 1;
				} else if (cart[index].quantity > 1) {
					cart[index].quantity -= 1;
				}

				// Update cart in localStorage
				localStorage.setItem('shoppingCart', JSON.stringify(cart));

				// Reload cart display
				loadCart();
			}

			if (
				target.classList.contains('remove-item') ||
				target.closest('.remove-item')
			) {
				const btn = target.classList.contains('remove-item')
					? target
					: target.closest('.remove-item');
				const index = parseInt(btn.getAttribute('data-index'));

				// Get current cart
				const cart =
					JSON.parse(localStorage.getItem('shoppingCart')) || [];

				// Remove item
				cart.splice(index, 1);

				// Update cart in localStorage
				localStorage.setItem('shoppingCart', JSON.stringify(cart));

				// Reload cart display
				loadCart();
			}
		});

		// Clear cart button
		clearCartBtn.addEventListener('click', () => {
			if (confirm('Â¿EstÃ¡s seguro que deseas vaciar el carrito?')) {
				localStorage.setItem('shoppingCart', JSON.stringify([]));
				loadCart();
			}
		});

		// WhatsApp checkout button
		whatsappCheckoutBtn.addEventListener('click', () => {
			const cart = JSON.parse(localStorage.getItem('shoppingCart')) || [];

			if (cart.length === 0) return;

			// Calculate total
			const total = cart.reduce(
				(sum, item) => sum + item.price * item.quantity,
				0
			);

			// Prepare WhatsApp message
			let message = `*Nuevo pedido desde FluentReads*\n\n*Productos:*\n`;

			cart.forEach((item, index) => {
				message += `${index + 1}. ${item.title} (${item.quantity}x) - S/${(item.price * item.quantity).toFixed(2)}\n`;
			});

			message += `\n*Total: S/${total.toFixed(2)}*\n\nPor favor, confirmame este pedido para enviarte los datos de pago. Â¡Gracias!`;

			// Open WhatsApp with the message
			window.open(
				`https://wa.me/${whatsappNumber}?text=${encodeURIComponent(message)}`,
				'_blank'
			);
		});

		// Initial load
		loadCart();
	});
</script>
