---
import Layout from '../../layouts/Layout.astro';
import PackDetails from '../../components/details/PackDetails.astro';
import packsData from '../../database/packs.json';
import siteInfo from '../../database/pageInformation.json';
import type { Pack } from '../../types/pack';

export async function getStaticPaths() {
	const packsArray = Array.isArray(packsData) ? packsData : [packsData];

	return packsArray.map((pack) => ({
		params: { id: pack.id },
		props: { pack },
	}));
}

interface Props {
	pack: Pack;
}

const { pack } = Astro.props;

// Find related packs if any (based on formatTags or level)
const packsArray = Array.isArray(packsData) ? packsData : [packsData];
const relatedPacks = packsArray
	.filter(
		(item) =>
			item.id !== pack.id &&
			((item.formatTags &&
				pack.formatTags &&
				item.formatTags.some((tag: string) =>
					pack.formatTags?.includes(tag)
				)) ||
				item.level === pack.level)
	)
	.slice(0, 3);

// Calculate discounted price if there's a discount
const hasDiscount = pack.discount !== undefined && pack.discount > 0;
const originalPrice = pack.price;
const discountedPrice = hasDiscount
	? pack.price * (1 - (pack.discount || 0) / 100)
	: pack.price;

// SEO metadata
const title = `${pack.title} | Pack de materiales en inglés | ${siteInfo.siteName}`;
const description =
	pack.description?.length > 160
		? `${pack.description.substring(0, 157)}...`
		: pack.description || `Pack de materiales en inglés: ${pack.title}`;

// Canonical URL
const siteUrl = new URL(siteInfo.siteURL);
const canonicalURL = new URL(`/pack/${pack.id}`, siteUrl);

// Structured data for rich snippets
const structuredData = {
	'@context': 'https://schema.org',
	'@type': 'Product',
	name: pack.title,
	description: pack.description,
	image: pack.coverImage,
	sku: pack.id,
	offers: {
		'@type': 'Offer',
		price: discountedPrice,
		priceCurrency: 'PEN',
		availability: 'https://schema.org/InStock',
		url: canonicalURL.toString(),
		priceValidUntil: new Date(
			new Date().setFullYear(new Date().getFullYear() + 1)
		)
			.toISOString()
			.split('T')[0],
	},
	brand: {
		'@type': 'Brand',
		name: `${siteInfo.siteName} - Packs de inglés`,
	},
	aggregateRating: pack.rating
		? {
				'@type': 'AggregateRating',
				ratingValue: pack.rating.score,
				reviewCount: pack.rating.reviewCount,
				bestRating: '5',
				worstRating: '1',
			}
		: undefined,
};

// Breadcrumb structured data
const breadcrumbJsonLd = {
	'@context': 'https://schema.org',
	'@type': 'BreadcrumbList',
	itemListElement: [
		{
			'@type': 'ListItem',
			position: 1,
			name: 'Inicio',
			item: new URL('/', siteUrl).toString(),
		},
		{
			'@type': 'ListItem',
			position: 2,
			name: 'Packs',
			item: new URL('/packs', siteUrl).toString(),
		},
		{
			'@type': 'ListItem',
			position: 3,
			name: pack.title,
			item: canonicalURL.toString(),
		},
	],
};
---

<Layout
	title={title}
	description={description}
	productType='pack'
	price={discountedPrice}
	currency='PEN'
	image={pack.coverImage}
	canonicalURL={canonicalURL}
	ogTitle={title}
	ogDescription={description}
	ogImage={pack.coverImage}
	twitterTitle={title}
	twitterDescription={description}
	twitterImage={pack.coverImage}
	structuredData={structuredData}
	breadcrumbData={breadcrumbJsonLd}>
	<PackDetails pack={pack} relatedProducts={relatedPacks} />

	<!-- Add event listener for cart operations -->
	<script>
		import { CartManager } from '../../utils/cartManager';

		// Initialize cart functionality
		document.addEventListener('DOMContentLoaded', () => {
			// Make sure cart is initialized
			if (typeof window !== 'undefined') {
				CartManager.initializeCart();
			}

			// Listen for cart updates to refresh indicators
			window.addEventListener('cartUpdated', () => {
				console.log('Cart updated');
			});
		});
	</script>
</Layout>
