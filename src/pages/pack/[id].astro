---
import Layout from '../../layouts/Layout.astro';
import PackDetails from '../../components/details/PackDetails.astro';
import packsData from '../../database/packs.json';
import type { Pack } from '../../types/pack';

export async function getStaticPaths() {
	const packsArray = Array.isArray(packsData) ? packsData : [packsData];

	return packsArray.map((pack) => ({
		params: { id: pack.id },
		props: { pack },
	}));
}

interface Props {
	pack: Pack;
}

const { pack } = Astro.props;

// Find related packs if any (based on formatTags or level)
const packsArray = Array.isArray(packsData) ? packsData : [packsData];
const relatedPacks = packsArray
	.filter(
		(item) =>
			item.id !== pack.id &&
			((item.formatTags &&
				pack.formatTags &&
				item.formatTags.some((tag: string) =>
					pack.formatTags?.includes(tag)
				)) ||
				item.level === pack.level)
	)
	.slice(0, 3);

// SEO metadata
const title = `${pack.title} | Pack de materiales en ingl√©s | FluentReads`;
const description = pack.description;
const image = pack.coverImage;

// Structured data for rich snippets
const structuredData = {
	'@context': 'https://schema.org',
	'@type': 'Product',
	name: pack.title,
	description: pack.description,
	image: pack.coverImage,
	offers: {
		'@type': 'Offer',
		price: pack.discount
			? pack.price * (1 - pack.discount / 100)
			: pack.price,
		priceCurrency: 'PEN',
		availability: 'https://schema.org/InStock',
		url: Astro.url.href,
	},
	brand: {
		'@type': 'Brand',
		name: 'FluentReads',
	},
};
---

<Layout
	title={title}
	description={description}
	image={image}
	canonicalURL={Astro.url.href}>
	<!-- Structured data for SEO -->
	<script
		type='application/ld+json'
		set:html={JSON.stringify(structuredData)}
	/>

	<PackDetails pack={pack} relatedProducts={relatedPacks} />

	<!-- Add event listener for cart operations -->
	<script>
		import { CartManager } from '../../utils/cartManager';

		// Initialize cart functionality
		document.addEventListener('DOMContentLoaded', () => {
			// Make sure cart is initialized
			if (typeof window !== 'undefined') {
				CartManager.initializeCart();
			}

			// Listen for cart updates to refresh indicators
			window.addEventListener('cartUpdated', () => {
				console.log('Cart updated');
			});
		});
	</script>
</Layout>
